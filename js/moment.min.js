class Calendar{
    constructor(id){
        this.cells = [];
        this.selectedDate = null;
        this.currentMonth = moment();
        this.elCalendar = document.getElementById(id);
        this.mortrarPlantilla();
        this.elGridBody =
        this.elCalendar.querySelector('.grid_body');
        this.elMonthName = this.elCalendar.querySelector('.mounth-name');
        this.mostrarCeldas();
        this.mostrarEventos();
         
    }

    mortrarPlantilla(){
        this.elCalendar.innerHTML = this.traerplantilla();
        this.addEventListenerToControls();
    }

    traerplantilla(){
        let template = `
        <div class="calendar__header">
                    <button class="control control--prev">&larr;</button>
                    <span class="mounth-name">Mar 2020</span>
                    <button class="control control--next">&rarr;</button>
                </div>
                <div class="calendar__body">
                    <div class="calendar-grid">
                        <div class="grid_header">
                            <span class="grid__cell grid__cell--header">lunes</span>
                            <span class="grid__cell grid__cell--header">Martes</span>
                            <span class="grid__cell grid__cell--header">Miércoles</span>
                            <span class="grid__cell grid__cell--header">Jueves</span>
                            <span class="grid__cell grid__cell--header">Viernes</span>
                            <span class="grid__cell grid__cell--header">Sábado</span>
                            <span class="grid__cell grid__cell--header">Domingo</span>
                        </div>
                        <hr>
                        <div class="grid_body">
                            
                        </div>
                    </div>   
                </div>`;
                return template;
    }

    mostrarEventos() {

    }

    addEventListenerToControls() {
        let elControls = 
        this.elCalendar.querySelectorAll('.control');
        elControls.forEach(elControl => {
            elControl.addEventListener('click', e =>{
                let elTarget = e.target;
                if (elTarget.classList.contains('control--next')) {
                    this.cambiarMes(true)
                }else {
                    this.cambiarMes(false);
                }
                this.mostrarCeldas();
            });
        });
    }

    cambiarMes(next = true){
        if (next) {
            this.currentMonth.add(1, 'months');
        } else {
            this.currentMonth.subtract(1, 'months');
        }
    }

    mostrarCeldas() {
        this.cells = this.generarFecha(this.currentMonth)
        if(this.cells === null) {
            console.error('No fue posible generar las fechas del calendario');
            return;
        }

        this.elGridBody.innerHTML = '';
        let templateCells = '';
        let disableClass = '';
        for(let i = 0; i < this.cells.length; i++) {
            disableClass = '';
            if (!this.cells[i].isInCurrentMonth) {
                disableClass = 'grid__cell--disable';
            }
            templateCells += `
            <span class="grid__cell grid__cell--body ${disableClass}"
            data-cell-id="${i}">
                ${this.cells[i].date.date()}            
            </span>
            `;
        }
        this.elMonthName.innerHTML=
        this.currentMonth.format('MMMM YYYY');
        this.elGridBody.innerHTML = templateCells;
        this.addEventListenerToCells();
    }

    generarFecha(mes = moment()) {
        if(!moment.isMoment(mes)){
            return null;
        }

        let primerFecha = moment(mes).startOf('month');
        let ultimaFecha = moment(mes).endOf('month');
        let cells = [];

        //Encuentra la primer fecha que se va a mostrar en el calendario
        while (primerFecha.day() !== 1 ) {
            primerFecha.subtract(1, 'days');
        }

        //Encuentra la última fecha que se va a mostrar en el calendario
        while (ultimaFecha.day() !==0) {
            ultimaFecha.add(1, 'days');

        }

        do{
            cells.push({
                date: moment(primerFecha),
                isInCurrentMonth: primerFecha.month() === mes.month()
            });
            primerFecha.add(1, 'days'); 
        }while(primerFecha.isSameOrBefore(ultimaFecha));
        
        return cells;
    }

    addEventListenerToCells(){
        let elCells = this.elCalendar.querySelectorAll('.grid__cell--body');
        elCells.forEach(elCells => {
            elCells.addEventListener('click', e => {
                let elTarget = e.target;
                if (elTarget.classList.contains('grid__cell--disable') ||
                elTarget.classList.contains('grid__cell--active'))
                {
                    return;
                }
                //Deseleccionar la celda anterior 
                let selectedCell = this.elGridBody.querySelector('.grid__cell--active');
                if (selectedCell) {
                    selectedCell.classList.remove('grid__cell--active');
                }
                //Seleccionar la nueva celda
                elTarget.classList.add('grid__cell--active');
                this.selectedDate =
                this.cells[parseInt(elTarget.dataset.cellId)].date;
                this.elCalendar.dispatchEvent(new Event('change'))
            });
        });
    }
    getElement(){
        return this.elCalendar;
    }

    value() {
         return this.selectedDate;
    }
} 